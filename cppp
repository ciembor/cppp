#!/bin/bash

########################################################################
###   GLOBAL VARIABLES   ###############################################

PERIOD=50
SOURCE=
TARGET=

SOURCE_SIZE=''
TARGET_SIZE=''

SIZE_UNITS=( 'B ' 'KB' 'MB' 'GB' 'TB' 'PB' 'EB' 'ZB' 'YB' )

########################################################################
###   OPTIONS   ########################################################

function print_help {

cat << EOF
usage: $0 options

Syntax: cppp [OPTION]... -s SOURCE -t TARGET|DIRECTORY
    
This script copy SOURCE to TARGET or SOURCE to DIRECTORY
(where source is a file) and displays a progress bar.

OPTIONS:
   -h      Show usage
   -p      Refreshing period in miliseconds [1; 1000]
   -s      Source file path
   -t      Target file or directory path
EOF

}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

while getopts "hs:t:p:" OPTION
do
  case $OPTION in
    h)
      print_help
      exit
      ;;
    s)
      SOURCE=$OPTARG
      ;;
    t)
      TARGET=$OPTARG
      ;;
    p)
      PERIOD=$OPTARG
      ;;
    ?)
      print_help
      exit 1
      ;;
  esac
done
  
# validation  # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  
if [ -d $SOURCE ]
then
  printf "SOURCE can't be a directory. It must be a file.\n"
  exit 1
fi

if [ ! -f $SOURCE ]
then
  printf "SOURCE is not valid.\n"
  exit 1
fi

if [[ -z $SOURCE  || -z $TARGET || $PERIOD -lt 10 || $PERIOD -gt 1000 ]]
then
  print_help
  exit 1
fi

########################################################################
###   FUNCTIONS   ###################################################### 

# copy_file $source $target
#
# @param $source - source file path
# @param $target - target file or directory path
# @return copied file size in bytes

function copy_file {

  local source=$1
  local target=$2

  cp $source $target &
  
  local source_size=`stat -c %s $source`
  local target_size=0
  local percent=0
  local string=''
  local max_width=`tput cols`
  local percent_width=7
  local bar_width=`echo $max_width-$percent_width | bc`
  
# cursor down (not cuu 2)
  printf '\n\n'
  
  while [ $target_size -lt $source_size ] ; do
  
    percent=`echo "($target_size*100)/$source_size" | bc -l | xargs printf '%1.0f'`

    string=''
    string=${string}`print_progress_bar $bar_width $percent`
    string=${string}" [`printf %3s ${percent}`%%]"
    string=${string}`print_size_bar $source_size $target_size`'\n'
    
    if [ $max_width = `tput cols` ]
    then
# CUrsor Up
      tput cuu 2
      printf "$string"
    fi
    
    target_size=`stat -c %s $target`
    sleep `echo $PERIOD/1000 | bc -l`
    
  done

  string=''
  string=${string}`print_progress_bar $bar_width 100`
  string=${string}" [100%%]"
  string=${string}`print_size_bar $source_size $source_size`'\n'
  string=${string}'Copying completed.\n'

  tput cuu 2

  printf "$string"
  
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# print_progress_bar $length $percent
#
# @param $length - length of progress bar in number of characters
# @param $percent - progress in percents

function print_progress_bar {
  
  local length=$1
  local percent=$2
  
  local progress_length=`echo "(($length-2)*$percent)/100" | bc -l | xargs printf '%1.0f'`
  
  local begin=1
  local middle=`echo $progress_length+1 | bc`
  local end=`echo $length-2 | bc`
  
  local progress_bar=''
  local empty_space=''
  
  for i in `seq $begin $progress_length` ; do
    progress_bar=$progress_bar'#'
  done
  
  for i in `seq $middle $end` ; do
    empty_space=$empty_space' '
  done

  printf "[${progress_bar}${empty_space}]"
  
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# print_size_bar $source_size $target_size
#
# @param $source_size - source size in bytes
# @param $target_size - target size in bytes

function print_size_bar {
  
  local source_size=$1
  local target_size=$2
  
  source_size=`print_size $source_size`
  target_size=`print_size $target_size`

  printf "[${target_size}/${source_size}]"
  
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# print_size $size
#
# @param size - size in bytes

function print_size {
  
  local size=$1
  local unit='??'
  
  for exponent in {1..10} ; do
  
    if [ `echo "$size < 1024" | bc` -eq 1 ] ; then
      unit=${SIZE_UNITS[`echo "$exponent-1" | bc`]}
      break
    fi
    
    size="`echo "$size/1024" | bc -l`"
    
  done
  
  if [ `echo "$size/100" | bc` -eq 0 ] ; then
    printf "`printf '%.4s' $size`$unit"
  else
    printf "`echo $size | bc -l | xargs printf '%1.0f' | xargs printf '%4s'`$unit"
  fi
  
}

########################################################################
###   MAIN   ###########################################################

# hide cursor
tput civis

copy_file $SOURCE $TARGET

# show cursor
tput cnorm
