#!/bin/bash

########################################################################
###   GLOBAL VARIABLES   ###############################################

MAX_WIDTH=`tput cols`


PERIOD=50
SOURCE=
TARGET=

SOURCE_SIZE=''
TARGET_SIZE=''

########################################################################
###   OPTIONS   ########################################################

function print_help {

cat << EOF
usage: $0 options

Syntax: cppp [OPTION]... -s SOURCE -t TARGET|DIRECTORY
    
This script copy SOURCE to TARGET or SOURCE to DIRECTORY

OPTIONS:
   -h      Show usage
   -p      Refreshing period in miliseconds [1; 1000]
   -s      Source file path
   -t      Target file or directory path
EOF

}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

while getopts "hs:t:p:" OPTION
do
  case $OPTION in
    h)
      print_help
      exit
      ;;
    s)
      SOURCE=$OPTARG
      ;;
    t)
      TARGET=$OPTARG
      ;;
    p)
      PERIOD=$OPTARG
      ;;
    ?)
      print_help
      exit 1
      ;;
  esac
done
  
# validation  # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  
if [[ -z $SOURCE  || -z $TARGET || $PERIOD -lt 10 || $PERIOD -gt 1000 ]]
then
  print_help
  exit 1
fi

########################################################################
###   FUNCTIONS   ###################################################### 

# copy_file $source $target
#
# @param $source - source file path
# @param $target - target file or directory path
# @return copied file size in bytes

function copy_file {

  local source=$1
  local target=$2
  
#  rm -rf $target
  cp $source $target &
  
  local source_size=`stat -c %s $source`
  local target_size=0
  local percent=0
  local string=''
  local bar_width=`echo $MAX_WIDTH-7 | bc`
  
  while [ $target_size -lt $source_size ] ; do
    percent=`echo "($target_size*100)/$source_size" | bc -l | xargs printf '%1.0f'`

    string=''
    string="Copying: ${string}${source}\n"
    string=${string}`print_progress_bar $bar_width $percent`
    string="${string} [`printf %3s ${percent}`%%]"
  
   printf "$string"

#echo $bar_width

# CUrsor Up
    tput cuu 2

    target_size=`stat -c %s $target`
    sleep `echo $PERIOD/1000 | bc -l`
    
  done

# CUrsor Down
  tput cud 2

  printf '\n'

  return $target_size

}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# progress_bar $length $percent
#
# @param $length - length of progress bar in number of characters
# @param $percent - progress in percents

function print_progress_bar {
  
  local length=$1
  local percent=$2
  
  local progress_length=`echo "(($length-2)*$percent)/100" | bc -l | xargs printf '%1.0f'`
  
  local begin=1
  local middle=`echo $progress_length+1 | bc`
  local end=`echo $length-2 | bc`
  
  local progress_bar=''
  local empty_space=''
  
  for i in `seq $begin $progress_length` ; do
    progress_bar=$progress_bar'#'
  done
  
  for i in `seq $middle $end` ; do
    empty_space=' '$empty_space
  done

  printf "[${progress_bar}${empty_space}]"
  
}

########################################################################
###   MAIN   ###########################################################

# hide cursor
tput civis

copy_file $SOURCE $TARGET

# show cursor
tput cnorm
